digraph UML_Created { 
rankdir=BT;
splines=ortho;
testclasses_LawDemeter2  [
shape="record",
label= "{testclasses_LawDemeter2|- java_lang_String : s\l|+ \<init\>(void) : void\l+ badMethod(testclasses_LottaFeildsClass, void) : void\l}" 
];
testclasses_LawDemeter2 -> java_lang_String [arrowhead="vee", style="solid", dir="forward" ]; 
testclasses_LawDemeter2 -> testclasses_LottaFeildsClass [arrowhead="vee", style="dashed", dir="forward" ]; 

java_lang_String  [
shape="record",
label= "{java_lang_String|- char[] : value\l- int : hash\l- long : serialVersionUID\l- java_io_ObjectStreamField[] : serialPersistentFields\l+ java_util_Comparator\<java_lang_String\> : CASE_INSENSITIVE_ORDER\l|+ \<init\>(void) : void\l+ \<init\>(java_lang_String, void) : void\l+ \<init\>(char[], void) : void\l+ \<init\>(char[], void) : void\l+ \<init\>(int[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l- static checkBounds(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(byte[], void) : void\l+ \<init\>(java_lang_StringBuffer, void) : void\l+ \<init\>(java_lang_StringBuilder, void) : void\l+ \<init\>(char[], void) : void\l+ length(int) : int\l+ isEmpty(boolean) : boolean\l+ charAt(int, char) : char\l+ codePointAt(int, int) : int\l+ codePointBefore(int, int) : int\l+ codePointCount(int, int) : int\l+ offsetByCodePoints(int, int) : int\l+ getChars(char[], void) : void\l+ getChars(int, void) : void\l+ getBytes(int, void) : void\l+ getBytes(java_lang_String, byte[]) : byte[]\l+ getBytes(java_nio_charset_Charset, byte[]) : byte[]\l+ getBytes(byte[]) : byte[]\l+ equals(java_lang_Object, boolean) : boolean\l+ contentEquals(java_lang_StringBuffer, boolean) : boolean\l- nonSyncContentEquals(java_lang_AbstractStringBuilder, boolean) : boolean\l+ contentEquals(java_lang_CharSequence, boolean) : boolean\l+ equalsIgnoreCase(java_lang_String, boolean) : boolean\l+ compareTo(java_lang_String, int) : int\l+ compareToIgnoreCase(java_lang_String, int) : int\l+ regionMatches(int, int, boolean) : boolean\l+ regionMatches(boolean, int, boolean) : boolean\l+ startsWith(java_lang_String, int, boolean) : boolean\l+ startsWith(java_lang_String, boolean) : boolean\l+ endsWith(java_lang_String, boolean) : boolean\l+ hashCode(int) : int\l+ indexOf(int, int) : int\l+ indexOf(int, int) : int\l- indexOfSupplementary(int, int) : int\l+ lastIndexOf(int, int) : int\l+ lastIndexOf(int, int) : int\l- lastIndexOfSupplementary(int, int) : int\l+ indexOf(java_lang_String, int) : int\l+ indexOf(java_lang_String, int, int) : int\l+ static indexOf(char[], int, int) : int\l+ static indexOf(char[], int) : int\l+ lastIndexOf(java_lang_String, int) : int\l+ lastIndexOf(java_lang_String, int, int) : int\l+ static lastIndexOf(char[], int, int) : int\l+ static lastIndexOf(char[], int) : int\l+ substring(int, java_lang_String) : java_lang_String\l+ substring(int, java_lang_String) : java_lang_String\l+ subSequence(int, java_lang_CharSequence) : java_lang_CharSequence\l+ concat(java_lang_String, java_lang_String) : java_lang_String\l+ replace(char, java_lang_String) : java_lang_String\l+ matches(java_lang_String, boolean) : boolean\l+ contains(java_lang_CharSequence, boolean) : boolean\l+ replaceFirst(java_lang_String, java_lang_String, java_lang_String) : java_lang_String\l+ replaceAll(java_lang_String, java_lang_String, java_lang_String) : java_lang_String\l+ replace(java_lang_CharSequence, java_lang_CharSequence, java_lang_String) : java_lang_String\l+ split(java_lang_String, int, java_lang_String[]) : java_lang_String[]\l+ split(java_lang_String, java_lang_String[]) : java_lang_String[]\l+ static join(java_lang_CharSequence, java_lang_CharSequence[], java_lang_String) : java_lang_String\l+ static join(java_lang_CharSequence, java_lang_Iterable\<null\>, java_lang_String) : java_lang_String\l+ toLowerCase(java_util_Locale, java_lang_String) : java_lang_String\l+ toLowerCase(java_lang_String) : java_lang_String\l+ toUpperCase(java_util_Locale, java_lang_String) : java_lang_String\l+ toUpperCase(java_lang_String) : java_lang_String\l+ trim(java_lang_String) : java_lang_String\l+ toString(java_lang_String) : java_lang_String\l+ toCharArray(char[]) : char[]\l+ static format(java_lang_String, java_lang_Object[], java_lang_String) : java_lang_String\l+ static format(java_util_Locale, java_lang_String, java_lang_Object[], java_lang_String) : java_lang_String\l+ static valueOf(java_lang_Object, java_lang_String) : java_lang_String\l+ static valueOf(char[], java_lang_String) : java_lang_String\l+ static valueOf(char[], java_lang_String) : java_lang_String\l+ static copyValueOf(char[], java_lang_String) : java_lang_String\l+ static copyValueOf(char[], java_lang_String) : java_lang_String\l+ static valueOf(boolean, java_lang_String) : java_lang_String\l+ static valueOf(char, java_lang_String) : java_lang_String\l+ static valueOf(int, java_lang_String) : java_lang_String\l+ static valueOf(long, java_lang_String) : java_lang_String\l+ static valueOf(float, java_lang_String) : java_lang_String\l+ static valueOf(double, java_lang_String) : java_lang_String\l+ intern(java_lang_String) : java_lang_String\l+ compareTo(java_lang_Object, int) : int\l+ static \<clinit\>(void) : void\l}" 
];
java_lang_String -> java_lang_String [arrowhead="vee", style="solid", headlabel="1__n", dir="forward"]; 

testclasses_LottaFeildsClass  [
shape="record",
label= "{testclasses_LottaFeildsClass|+ java_lang_String : string\l+ java_lang_Double : doble\l+ java_util_List : list\l+ org_objectweb_asm_tree_ClassNode : cNode\l+ java_awt_Color : color\l|+ \<init\>(void) : void\l}" 
];
testclasses_LottaFeildsClass -> java_lang_String [arrowhead="vee", style="solid", dir="forward" ]; 

testclasses_LawDem1   [ style="filled", fillcolor="cyan", color="black", 
shape="record",
label=  "{testclasses_LawDem1 \n\<LawOfDemeterViolation\>|+ \<init\>(void) : void\l+ specailMethod(testclasses_LottaFeildsClass, void) : void\l}" 
];
testclasses_LawDem1 -> testclasses_LottaFeildsClass  [ arrowhead="vee", style="dashed", dir="forward" ]; 
testclasses_LawDem1 -> java_lang_String   [  color=cyan, arrowhead="vee", style="dashed", dir="forward" ]; 

}